# Dockerfile for Mongo Connector

# Use an official Python runtime as a parent image
FROM ubuntu:18.04

# Installing Mongodb https://github.com/docker-library/mongo/blob/2f757af6d12f4239cf5541455b011921ee4c06d1/4.2/Dockerfile

RUN set -ex; \
	\
	savedAptMark="$(apt-mark showmanual)"; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
		wget

RUN apt-get install -y --no-install-recommends gnupg dirmngr

ENV APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn

# RUN wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | apt-key add -
RUN echo $(wget  --no-check-certificate -q https://www.mongodb.org/static/pgp/server-4.2.asc)
RUN wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc; apt-key add /server-4.2.asc; echo $(cat server-4.2.asc)

RUN echo "deb [trusted=yes]  https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-4.2.list

RUN apt-get install apt-transport-https
# To fix issue from apt-get update: Certificate verification failed: The certificate is NOT trusted. The certificate issuer is unknown.  Could not handshake: Error in the certificate verification.
RUN apt-get install -y --reinstall ca-certificates

RUN apt-get update

RUN apt-get install -y mongodb-org


# Now python https://github.com/docker-library/python/blob/fe11c2ed5a3a3a1917f0a37f3f265d81969d09d9/3.6/stretch/Dockerfile

# ensure local python is preferred over distribution python
ENV PATH /usr/local/bin:$PATH

# http://bugs.python.org/issue19846
# > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not OK.
ENV LANG C.UTF-8

# extra dependencies (over what buildpack-deps already includes)
RUN apt-get update && apt-get install -y --no-install-recommends \
		tk-dev \
	&& rm -rf /var/lib/apt/lists/*

# install a bunch of new packages including gcc, g++ and make.
RUN apt-get update && apt-get install -y gcc 

ENV GPG_KEY 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
ENV PYTHON_VERSION 3.6.9

# NOTE: gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"
#       may well fail. The only work around is to put it in a loop until it succeeds.
RUN set -ex \
	\
	&& wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz" \
	&& wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc" \
	&& export GNUPGHOME="$(mktemp -d)" \
	&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY" \
	&& gpg --batch --verify python.tar.xz.asc python.tar.xz \
	&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \
	&& rm -rf "$GNUPGHOME" python.tar.xz.asc \
	&& mkdir -p /usr/src/python \
	&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \
	&& rm python.tar.xz \
	\
	&& cd /usr/src/python \
	&& gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
	&& ./configure \
		--build="$gnuArch" \
		--enable-loadable-sqlite-extensions \
		--enable-optimizations \
		--enable-shared \
		--with-system-expat \
		--with-system-ffi \
		--without-ensurepip \
	&& make -j "$(nproc)" \
# setting PROFILE_TASK makes "--enable-optimizations" reasonable: https://bugs.python.org/issue36044 / https://github.com/docker-library/python/issues/160#issuecomment-509426916
		PROFILE_TASK='-m test.regrtest --pgo \
			test_array \
			test_base64 \
			test_binascii \
			test_binhex \
			test_binop \
			test_bytes \
			test_c_locale_coercion \
			test_class \
			test_cmath \
			test_codecs \
			test_compile \
			test_complex \
			test_csv \
			test_decimal \
			test_dict \
			test_float \
			test_fstring \
			test_hashlib \
			test_io \
			test_iter \
			test_json \
			test_long \
			test_math \
			test_memoryview \
			test_pickle \
			test_re \
			test_set \
			test_slice \
			test_struct \
			test_threading \
			test_time \
			test_traceback \
			test_unicode \
		' \
	&& make install \
	&& ldconfig \
	\
	&& find /usr/local -depth \
		\( \
			\( -type d -a \( -name test -o -name tests \) \) \
			-o \
			\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
		\) -exec rm -rf '{}' + \
	&& rm -rf /usr/src/python \
	\
	&& python3 --version

# make some useful symlinks that are expected to exist
RUN cd /usr/local/bin \
	&& ln -s idle3 idle \
	&& ln -s pydoc3 pydoc \
	&& ln -s python3 python \
	&& ln -s python3-config python-config


RUN apt-get -y install python3-pip; echo $(pip3 --version); echo $(which pip3)

RUN pip3 install --upgrade pip

RUN echo $(pip3 --version); echo $(which pip3); echo $(pip --version); echo $(which pip)

# INSTALLING PIP THE OFFICIAL WAY DID NOT WORK used another way see above: ip3 install --upgrade pip to get v 19.2.2
## if this is called "PIP_VERSION", pip explodes with "ValueError: invalid truth value '<VERSION>'"
#ENV PYTHON_PIP_VERSION 19.2.2
## https://github.com/pypa/get-pip
#ENV PYTHON_GET_PIP_URL https://github.com/pypa/get-pip/raw/0c72a3b4ece313faccb446a96c84770ccedc5ec5/get-pip.py
#ENV PYTHON_GET_PIP_SHA256 201edc6df416da971e64cc94992d2dd24bc328bada7444f0c4f2031ae31e8dad
#
#RUN set -ex; \
#	\
#	wget -O get-pip.py "$PYTHON_GET_PIP_URL"; \
#	echo "$PYTHON_GET_PIP_SHA256 *get-pip.py" | sha256sum --check --strict -; \
#	\
#	python get-pip.py \
#		--trusted-host pypi.org \
#		--disable-pip-version-check \
#		--no-cache-dir \
#		"pip==$PYTHON_PIP_VERSION" \
#	; \
#	pip --version; \
#	\
#	find /usr/local -depth \
#		\( \
#			\( -type d -a \( -name test -o -name tests \) \) \
#			-o \
#			\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
#		\) -exec rm -rf '{}' +; \
#	rm -f get-pip.py

# RUN echo $(python3 --version)

RUN pip install mongo-connector==3.1.1 solr-doc-manager==0.1.0

RUN apt-get install -y bash

COPY start_mongo_connector.sh /usr/local/bin
# RUN echo $(ls -lR)
ENTRYPOINT ["/usr/local/bin/start_mongo_connector.sh"]
CMD ["localhost", "localhost"]
